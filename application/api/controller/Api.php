<?php
/**
 * 授权基类，所有获取access_token以及验证access_token 异常都在此类中完成
 */

namespace app\api\controller;

use app\api\model\Identity;
use app\api\model\Member;
use app\common\model\Share;
use extend\PinYin;
use think\Controller;
use think\Db;
use think\Request;
use think\Session;



header("Access-Control-Allow-Origin:*");
class Api extends Controller
{
    public  $noCheck = [
        'register','login','gettoken','wxnotify','wxlogin','alinotify','getcode','doexcel'
    ];//跳过登录token验证
    public $uid;
    const PAY = 0;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //当前方法
        $action = Request::instance()->action();
        if(!in_array($action,$this->noCheck)){
            self::checkUid();
            $accessToken = isset($_SERVER['HTTP_ACCESSTOKEN'])?$_SERVER['HTTP_ACCESSTOKEN']:'';
            $uid = session('uid');
            Token::checkAccessToken($accessToken,$uid);
        }
    }
    protected  function checkUid(){
        $uid = session('uid');
        if(!$uid){
            Share::jsonData(100,'','你还没登录');
        }
        $loginTime = session('login');
        $now = time();
        $expire = 7200;
        if(($loginTime + $expire) < $now ){
            session(null);//销毁所有登录信息
            Share::jsonData(101,'','登录失效，请重新登录！');
        }
        $this->uid = $uid;
    }

    //TODO 余额充值
    public function rechargePay(){
        $uid = $this->uid;
        $money = input('money',0);
        $type = input('type',1);//1-微信 2-支付宝
        Share::checkEmptyParams(['money'=>$money]);
        if($type == 1){
            Appwxpay::recharge($uid,$money);
        }else{
            Appalipay::recharge($uid,$money);
        }
    }
    /**
     * 支付宝回调
     */
    public function aliNotify(){
        Appalipay::notify();
    }
    /**
     * 微信回调
     */
    public function wxNotify(){
        Appwxpay::notify();
    }
    //TODO 微信授权登录
    public function wxLogin() {
//            $json = '{"nickname":".","openid":"o8m6C57HIDfgizWst5ORVxyAXjfI","unionid":"oTa415y5Xs0rTBmN20ngPoEuSMFg","headimgurl":"http://thirdwx.qlogo.cn/mmopen/vi_32/SkxPZKY0iboCkjbtGXic5oYmFAJNnS1UjiaGs2rGfZutA1FZydUAKl2h7cVGfCtYX50SibbOugJzUgsZQuvQvlhbtw/132"}';
//            $str = json_decode($json,true);
        $name = strip_tags(input('nickname'));//昵称
        $openid = strip_tags(input('openid')); //openid
        $unionid = strip_tags(input('unionid'));
        $inviterCode = strip_tags(input('inviterCode'));//邀请人的邀请码
        $phone = strip_tags(input('phone')); // 手机号码
        $password = "123456"; // 密码
        $headimg = strip_tags(input('headimgurl'));
//			$headimg = $str['headimgurl'];
        if($headimg=='')$headimg ='/uploads/avatar/mr.jpg';
        Share::checkEmptyParams(['openid'=>$openid,'nickname'=>$name]);
        $user = db('member')->where('openid',$openid)->find();
        $user1 = db('member')->where('unionid',$unionid)->find();
        if(!$user && !$user1){//新增
            $inviteCode = Share::getInviteCode();
            $params = [
                'phone'=>$phone,
                'password'=>md5($password),
                'real_pass'=>$password,
                'username'=>$name,
                'nickname'=>$name,
                'createTime'=>time(),
                'money'=>0,
                'openid'=>$openid,
                'unionid'=>$unionid,
                'avatar'=>$headimg,
                'inviteCode'=>$inviteCode,
            ];
            $res = db('member')->insert($params);
        }else{//修改
            $params = [
                'phone'=>$phone,
                'nickname'=>$name,
                'unionid'=>$unionid,
                'openid'=>$openid,
//                'avatar'=>$headimg,
                'updateTime'=>time(),
            ];
            if($user){
                $res = db('member')->where('openid',$openid)->update($params);
            }else{
                $res = db('member')->where('unionid',$unionid)->update($params);
            }
        }
        if($res){//登录成功
            $user = db('member')->where('openid',$openid)->find();
            $uid = $user['id'];
            session('uid',$uid);
            session('login',time());
            //打卡次数
            $signNum = Share::getUserSignNum($uid);
            //累计收益
            $moneyGet = Share::getUserMoneyGet($uid);
            $user['signNum'] = $signNum;
            $user['moneyGet'] = $moneyGet;
            Share::jsonData(1,$user,'登录成功');
        }else{
            Share::jsonData(0,'','授权失败！');
        }

    }

    /**
     * 获取验证码
     */
    public function getCode(){
        $phone = input('phone');
        Share::checkEmptyParams(['phone'=>$phone]);
        if(strlen($phone) != 11){
            Share::jsonData(0,'','手机号码长度有误');
        }
        $code = rand(1111,9999);
        $endTime = time()+300;//有效时间五分钟
        $codeArr = [
            'code'=>1234,
            'endTime'=>$endTime
        ];
//        $sms = new Sms();
//        $sms->smsSendCode($phone,$code);
        session($phone,$codeArr);
        $data = [
            'phone'=>$phone,
        ];
        Share::jsonData(1,$data,'success');
    }

    /**
     * 注册接口
     */
    pubLic function register(){
        $phone = input("phone");
        $code = input('code');
        $password = input('password');
        $surePass = input('surePass');
        $inviterCode = input('inviterCode','');
        $params = [
            'phone'=>$phone,
            'code'=>$code,
            'password'=>$password,
            'surePass'=>$surePass
        ];
        Share::checkEmptyParams($params);
        if($password != $surePass){
            Share::jsonData(0,'','两次密码不一致');
        }
        //查看当前用户是否已经注册
        $hadUser = db('member')->where("phone",$phone)->find();
        if($hadUser){
            Share::jsonData(0,'','当前用户已经注册');
        }
        if($inviterCode){
            $sharer = db('member')->where('inviteCode',$inviterCode)->find();
            if(!$sharer){
                Share::jsonData(0,'','没有该邀请人信息');
            }
        }
        //验证验证码是否正确
        $trueCode = session($phone);
        $now = time();
        if($now > $trueCode['endTime']){
            Share::jsonData(0,'','验证码已过期！');
        }
        if($trueCode['code'] != $code){
            Share::jsonData(0,'','验证码不正确！');
        }
        $insert = [
            'phone'=>$phone,
            'password'=>md5($password),
            'real_pass'=>$password,
            'createTime'=>$now,
            'money'=>0,
            'inviterCode'=>$inviterCode,
        ];
        $res = db('member')->insert($insert);
        if($res){
            session($phone,null);
            if($inviterCode){
                $uid = db('member')->where(['phone'=>$phone])->find()['id'];
//                邀请奖励
                Share::shareReward($uid,0,'',4);
            }
            Share::jsonData(1,'','注册成功');
        }else{
            Share::jsonData(0,'','注册失败');
        }
    }
    /**
     * 忘记密码
     * 修改密码
     */
    pubLic function forgetPass(){
        $phone = input("phone");
        $code = input('code');
        $password = input('password');
        $surePass = input('surePass');
        $params = [
            'phone'=>$phone,
            'code'=>$code,
            'password'=>$password,
            'surePass'=>$surePass
        ];
        Share::checkEmptyParams($params);
        if($password != $surePass){
            Share::jsonData(0,'','两次密码不一致');
        }
        //查看当前用户是否已经注册
        $hadUser = db('member')->where("phone",$phone)->find();
        if(!$hadUser){
            Share::jsonData(0,'','你还没有注册过！');
        }
        //验证验证码是否正确
        $trueCode = session($phone);
        $now = time();
        if($now > $trueCode['endTime']){
            Share::jsonData(0,'','验证码已过期！');
        }
        if($trueCode['code'] != $code){
            Share::jsonData(0,'','验证码不正确！');
        }
        $insert = [
            'phone'=>$phone,
            'password'=>md5($password),
            'real_pass'=>$password,
        ];
        $res = db('member')->where('phone',$phone)->update($insert);
        if($res){
            session($phone,null);
            Share::jsonData(1,'','修改成功');
        }else{
            Share::jsonData(0,'','修改失败');
        }
    }
    /**
     * 用户登录
     */
    public function login(){
        $phone = input('post.phone');
        $password = input('post.password');
        Share::checkEmptyParams(['phone'=>$phone,'password'=>$password]);
        $user = db('member')->where(['phone'=>$phone,'password'=>md5($password)])->find();
        if($user){
            session('uid',$user['id']);
            session('login',time());
            //记录用户登录
            self::saveUserLogin($user['id'],1);//1-账号登录 2-微信登录
            $token = Token::setAccessToken();
            $user['token'] = $token;
            Share::jsonData(1,$user,'登录成功');
        }else{
            Share::jsonData(0,'','用户名或密码错误');
        }
    }

    /**
     * 获取token
     */
    public function getToken(){
        Token::setAccessToken();
    }
    /**
     * 头像上传
     */
    public function uploadImg(){
        $host = config('hostUrl');
        $file = request()->file('file');
        $type = input('type',1);//1-头像  2-商品图片
        if (!empty($file)) {
            // 移动到框架应用根目录/public/uploads/category 目录下
            if($type ==1){
                $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads/avatar');
                $dir = '/uploads/avatar';
            }else{
                $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads/product');
                $dir = '/uploads/product';
            }
            if ($info) {
                $src = $dir . '/' . date('Ymd') . '/' . $info->getFilename();
                Share::jsonData(0,['src' => $src]);
            } else {
                // 上传失败获取错误信息
                Share::jsonData(0,'',$file->getError());
            }
        }else{
            Share::jsonData(0,'','图片不存在');
        }
    }
    /**
     * 文件上传
     */
    public function uploadFile(){
        $host = config('hostUrl');
        $file = request()->file('file');
        if (!empty($file)) {
            // 移动到框架应用根目录/public/uploads/category 目录下
            $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads/file');
            if ($info) {
                $src = '/uploads/file' . '/' . date('Ymd') . '/' . $info->getFilename();
                Share::jsonData(1,['src' => $src]);
            } else {
                // 上传失败获取错误信息
                Share::jsonData(0,'',$file->getError());
            }
        }else{
            Share::jsonData(0,'','文件不存在');
        }
    }
    /**
     * 用户信息修改
     */
    public function messageEdit(){
        $uid = $this->uid;
        $params['nickname'] = input('nickname');
        $params['sex'] = input('sex');
        $params['real_name'] = input('real_name');
        $params['card'] = input('card');
        $params['avatar'] = input('avatar');
        $params['updateTime'] = time();
        $res = db('member')->where('id',$uid)->update($params);
        if($res){
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','修改失败');
        }
    }
    /**
     * 用户信息获取
     */
    public function myMessage(){
        $uid = $this->uid;
        $user = db('member')->where('id',$uid)->find();
        //打卡次数
        $signNum = Share::getUserSignNum($uid);
        //累计收益
        $moneyGet = Share::getUserMoneyGet($uid);
        $user['signNum'] = $signNum;
        $user['moneyGet'] = $moneyGet;
        Share::jsonData(1,$user);
    }
    /**
     * 房间挑战
     * 房间类型信息
     * 普通 保底
     */
    public function roomType(){
        $roomType = db('room_type')->select();
        foreach($roomType as $k => $v){
            $roomType[$k]['typeStr'] = Share::getRoomTypeStr($v['type']);
        }
        Share::jsonData(1,$roomType);
    }
    /**
     * 房间挑战
     * 创建房间
     * 用户创建
     */
    public function roomCreate(){
        $uid = $this->uid;
        $params['type'] = input('type',1);//1-保底房间 2-普通房间
        $params['name'] = input('name');
        $params['desc'] = input('desc');//房间描述
        $joinMoney = input('joinMoney/a',[]);//设置的报名金额  数组
        $params['money'] = input('money');//活动金额  自己的报名费  创建费
        $params['beginDate'] = input('beginDate','');//开始时间
        $params['day'] = input('day',1);//天数 周期
        $signBegin = input('signBegin');//签到开始时间
        $signEnd = input('signEnd');//签到结束时间
        $signNum = input('signNum',1);//签到次数 最多两次
        $signNum = $signNum>1?2:1;
        $params['signNum'] = $signNum;
        $signBeginMinute = Share::getMinute($signBegin);//获取对应的分钟数
        $signEndMinute = Share::getMinute($signEnd);
        if($signEndMinute < $signBeginMinute){
            Share::jsonData(0,'','首次签到结束时间不能小于首次签到开始时间');
        }
        $params['signBegin'] = $signBeginMinute;
        $params['signEnd'] = $signEndMinute;
        if($signNum > 1){//获取去第二次签到时间
            $secondBegin = input('secondBegin');
            $secondEnd = input('secondEnd');
            $secondBeginMinute = Share::getMinute($secondBegin);
            $secondEndMinute = Share::getMinute($secondEnd);
            if($secondEndMinute < $secondBeginMinute){
                Share::jsonData(0,'','二次签到开始不能小于二次签到结束时间！');
            }
            if($secondBeginMinute < $signEndMinute){
                Share::jsonData(0,'','二次签到开始时间必须大于首次签到结束时间！');
            }
            $params['secondBegin'] = $secondBeginMinute;
            $params['secondEnd'] = $secondEndMinute;
            $params['secondBeginStr'] = $secondBegin;
            $params['secondEndStr'] = $secondEnd;
        }
        if(!$joinMoney || !is_array($joinMoney)){
            Share::jsonData(0,'','请设置报名费金额');
        }
        Share::checkEmptyParams($params);
        if(!in_array($params['money'],$joinMoney)){
            Share::jsonData(0,'','请您自己选择正确的报名费');
        }
        $params['beginTimeStr'] = $signBegin;
        $params['endTimeStr'] = $signEnd;
        $params['sign'] = 1;//1-一键签到 2-发圈签到
        //判断该房间名是否已存在（报名中和活动中）  禁止房间名一样
        //状态  状态 0-报名中   1-活动中 2-活动结束
        $had = db('room_create')->where(['name'=>$params['name'],'status'=>['in',[0,1]]])->find();
        if($had){
            Share::jsonData(0,'','当前房间名已存在，请重试');
        }
//        if($params['type'] == 1 ){//保底房间
//            $minMoney = Share::getlowest(1);//1-最低金额 2-最高金额
//            $maxMoney = Share::getLowest(2);
//            if($params['money'] < $minMoney){
//                Share::jsonData(0,'','保底房间的最低金额不能小于'.$minMoney);
//            }
//            if($params['money'] > $maxMoney){
//                Share::jsonData(0,'','保底房间的最高金额不能大于'.$maxMoney);
//            }
//        }else{//普通房间
//            $minMoney = Share::getCommon(1);
//            $maxMoney = Share::getCommon(2);
//            if($params['money'] < $minMoney){
//                Share::jsonData(0,'','普通房间的最低金额不能小于'.$minMoney);
//            }
//            if($params['money'] > $maxMoney){
//                Share::jsonData(0,'','普通房间的最高金额不能大于'.$maxMoney);
//            }
//        }
        $now = strtotime(date('Y-m-d H:i:s'));//当前分钟的时间戳
        $today = strtotime(date('Y-m-d'));//当天的时间戳
        $beginTime  = strtotime($params['beginDate']);//活动开始时间
        if($beginTime < $today){
            Share::jsonData(0,'','活动开始日期不能小于今天');
        }
        $signBeginTime = $beginTime + $params['signBegin']*60;//第一天的活动签到开始时间
        $roomTime = Share::ROOMTIME;
        $endJoinTime = $signBeginTime - $roomTime;//签到开始十分钟前才能可以报名
        if($endJoinTime < $now){
            Share::jsonData(0,'','活动开始十分钟前才能报名，请设置合理的开始时间（首次签到时间）！');
        }
        $params['beginTime'] = $signBeginTime;//首次签到开始时间  时间戳
        $params['createTime'] = time();
        $params['uid'] = $uid;
        $params['status'] = 0;//状态 0-报名中   1-活动中 2-活动结束
        //创建房间费用扣除
        Share::reduceRoomMoney($uid,$params['money'],$params['name'],1);
        $res = db('room_create')->insert($params);
        if($res){
            $roomId = db('room_create')->getLastInsID();
            //添加自己的报名信息
            Share::addRoomChallenge($uid,$roomId,$params['money'],$params['type']);
            //记录对应的房间报名费信息
            Share::saveRoomJoinMoney($roomId,$joinMoney);
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','创建失败，请重试！');
        }
    }
    /**
     * 房间挑战
     * 挑战列表
     * 用户获取
     */
    public function roomList(){
        $uid = $this->uid;
        $type = input('type',0);//0-所有 1-保底 2-普通
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $where = [
            'status'=>['in',[0,1]],// 0-报名中 1-活动中 2-活动结束
        ];
        if($type){
            $where['type'] = $type;
        }
        $offset = ($page-1)*$pageSize;
        $total = db('room_create')->where($where)->count();
        $data = db('room_create')->where($where)->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $user = db('member')->where('id',$v['uid'])->find();
            $data[$k]['nickname'] = $user['nickname'];
            $data[$k]['avatar'] = $user['avatar'];
            //报名人数
            $joinCount = db('room_join')->where('roomId',$v['id'])->count();
            $data[$k]['joinNum'] = intval($joinCount);
            //报名金额
            $joinMoney  = db('room_join')->where('roomId',$v['id'])->sum('joinMoney');
            $data[$k]['joinMoney'] = $joinMoney?$joinMoney:0;
            //是否已经报名
            $isJoin = db('room_join')->where(['roomId'=>$v['id'],'uid'=>$uid])->find();
            if($isJoin){
                $data[$k]['joinData'] = $isJoin;
                $data[$k]['isJoin'] = 1;
            }else{
                $data[$k]['isJoin'] = 0;
                $data[$k]['joinData'] = [];
            }
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 房间挑战
     * 房间挑战详情
     */
    public function roomDetail(){
        $uid = $this->uid;
        $roomId = input('roomId',0);
        Share::checkEmptyParams(['roomId'=>$roomId]);
        $room = db('room_create')->where('id',$roomId)->find();
        if(!$room){
            Share::jsonData(0,'','该挑战房间不存在！');
        }
        $room['room_type'] = db('room_type')->where('type',$room['type'])->find();
        //当前报名人数
        $joinCount = db('room_join')->where('roomId',$roomId)->count();
        $joinCount = $joinCount?$joinCount:0;
        $room['joinNum'] = $joinCount;
        //报名金额
        $joinMoney = db('room_join')->where('roomId',$roomId)->sum('joinMoney');
        $room['joinMoney'] = $joinMoney?$joinMoney:0;
        //是否已经报名
        $isJoin = db('room_join')->where(['roomId'=>$roomId,'uid'=>$uid])->find();
        if($isJoin){
            $room['joinTime'] = $isJoin['createTime'];
            $room['isJoin'] = 1;
            $isSign = Share::getTodayRoomSign($uid,$roomId,$room['signNum']);//今日打卡次数
            if($isJoin['status'] == 1){//1-参与中 2-已失败 3-已完成
                $success = Share::checkJoinStatus($uid,$roomId,$room['signNum']);//参与状态
            }
            $isJoin = db('room_join')->where(['roomId'=>$roomId,'uid'=>$uid])->find();
            $room['joinData'] = $isJoin;
            $room['joinStatus'] = $isJoin['status'];
        }else{
            $room['isJoin'] = 0;
            $room['joinData'] = [];
            $isSign = 0;//0-未打卡 1-已打卡
        }
        //已打卡次数
        $room['isSign'] = $isSign;
        //昨日收益金额
//        $room['yesterdayMoney'] = Share::getYesterdayMoneyByRoom($uid,$roomId);
        $room['yesterdayMoney'] = 0;
        //报名费
        $room['prices'] = db('room_price')->where('roomId',$roomId)->order('price','desc')->select();
        Share::jsonData(1,$room);
    }
    /**
     * 房间挑战
     * 用户报名
     */
    public function roomJoin(){
        $uid = $this->uid;
        $roomId = input('roomId',0);//房间id
        $joinMoney = input('joinMoney');//报名金额
        Share::checkEmptyParams(['roomId'=>$roomId]);
        $room = db('room_create')->where('id',$roomId)->find();
        if(!$room){
            Share::jsonData(0,'','没有该房间信息！');
        }
        if($room['status'] != 0){//报名中
            Share::jsonData(0,'','该房间挑战不是报名中，不能报名！');
        }
        //开始十分钟前才可报名
        $now = time();
        $roomTime = Share::ROOMTIME;
        $beginTime = $room['beginTime'] - $roomTime;
        if($now >= $beginTime){
            Share::jsonData(0,'','活动开始十分钟前才能报名，当前时间已过最晚报名时间！');
        }
        //判断自己是否已经报名
        $hadJoin = db('room_join')->where(['roomId'=>$roomId,'uid'=>$uid])->find();
        if($hadJoin){
            Share::jsonData(0,'','你已经参加该房间挑战，请勿重复参加！');
        }
        //报名费判断
        $hadMoney = db('room_price')->where(['roomId'=>$roomId,'price'=>$joinMoney])->find();
        if(!$hadMoney){
            Share::jsonData(0,'','没有该报名费，请选择正确的报名金额');
        }
        //扣除报名费用
        Share::reduceRoomMoney($uid,$room['money'],$room['name'],2);
        //记录挑战报名信息
        $params = [
            'uid'=>$uid,
            'roomId'=>$roomId,
            'createTime'=>time(),
            'type'=>$room['type'],//1-保底 2-普通
            'status'=>1,//1-参与中 2-已失败 3-已完成
            'joinMoney'=>$joinMoney,
        ];
        $res = db('room_join')->insert($params);
        if($res){
            //邀请人信息记录
            $objectStr = '房间挑战（'.$room['name'].'）';
            Share::shareReward($uid,$roomId,$objectStr,2);//1-打卡 2-房间挑战 3-闯关 4-邀请新人
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','报名失败，请售后重试！');
        }
    }
    /**
     * 房间挑战
     * 用户打卡签到
     */
    public function roomSign(){
        $uid = $this->uid;
        $roomId = input('roomId');
        Share::checkEmptyParams(['roomId'=>$roomId]);
        $room = db('room_create')->where('id',$roomId)->find();
        if(!$room){
            Share::jsonData(0,'','没有该房间！');
        }
        Share::checkRoomStatus($room);
        if($room['status'] == 0){
            Share::jsonData(0,'','当前挑战还没有开始，不可进行签到！');
        }
        if($room['status'] == 2){
            Share::jsonData(0,'','当前挑战已经结束了！');
        }
        //判断自己是否已报名
        $hadJoin = db('room_join')->where(['roomId'=>$roomId,'uid'=>$uid])->find();
        if(!$hadJoin){
            Share::jsonData(0,'','你还没有参加该房间挑战活动，不可进行签到！');
        }
        if($hadJoin['status'] == 2){
            Share::jsonData(0,'','您已挑战失败，签到无效');
        }
        if($hadJoin['status'] == 3){
            Share::jsonData(0,'','您已挑战完成，签到无效');
        }
        //签到判断
        Share::roomSign($uid,$room);
        Share::jsonData(1);
    }

    /**
     * 房间挑战
     * 房间列表
     * 创建人获取
     * 我的发布
     */
    public function myRoom(){
        $uid = $this->uid;
//        $pattern = input('pattern',0);//项目模式 0-全部  1-每日奖励金瓜分 2-平分模式
        $type = input('type',0);//0-所有 1-保底 2-普通
        $status = input('status',99);//99-全部  0-报名中   1-活动中 2-活动结束
        $where = [
            'uid'=>$uid,
        ];
        if($status != 99){
            $where['status'] = $status;
        }
//        if($pattern){
//            $where['pattern'] = $pattern;
//        }
        if($type){
            $where['type'] = $type;
        }
        $data = db('room_create')->where($where)->select();
        foreach($data as $k=> $v){
            //报名金额
            $number = db('room_join')->where(['roomId'=>$v['id']])->count();
            $joinMoney = db('room_join')->where(['roomId'=>$v['id']])->sum('joinMoney');
            $data[$k]['joinMoney'] = $joinMoney?$joinMoney:0;
            $data[$k]['joinNumber'] = $number?$number:0;
        }
        Share::jsonData(1,$data);
    }

    /**
     * 房间挑战
     * 我的参与
     * 用户获取
     */
    public function myRoomJoin(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $status = input('status',0);//0-全部 1-参与中 2-已失败 3-已完成
        $where = [
            'uid'=>$uid,
        ];
        if($status){
            $where['status'] = $status;
        }
        $offset = $pageSize*($page-1);
        $total = db('room_join')->where($where)->count();
        $data = db('room_join')->where($where)->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $room = db('room_create')->where('id',$v['roomId'])->find();
            //创建人信息
            $user = db('member')->where('id',$room['uid'])->find();
            $room['roomerNickname'] = $user['nickname'];
            $room['roomerAvatar'] = $user['avatar'];
            $data[$k]['room'] = $room;
            //报名金额
            $number = db('room_join')->where(['roomId'=>$v['roomId']])->count();
            $joinMoney = db('room_join')->where(['roomId'=>$v['roomId']])->sum('joinMoney');
            $data[$k]['joinMoney'] = $joinMoney?$joinMoney:0;
            $data[$k]['joinNumber'] = $number?$number:0;
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 房间挑战
     * 我的打卡
     */
    public function myRoomSign(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $offset = $pageSize*($page-1);
        $total = db('sign')->where(['uid'=>$uid])->count();
        $data = db('sign')->where('uid',$uid)->order('id','desc')->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $room = db('room_create')->where('id',$v['roomId'])->find();
            $data[$k]['room'] = $room?$room:[];
            $data[$k]['roomName'] = isset($room['name'])?$room['name']:'房间已被删除';
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }

    /**
     * 打卡
     * 打卡活动获取
     * 用户获取
     */
    public function clockInList(){
        $uid = $this->uid;
        $data = db('clock_in')->where('status',1)->order('sort','desc')->select();
        foreach($data as $k => $v){
            //报名人数
            $currJoinNum = db('clock_in_join')->where(['clockInId'=>$v['id'],'status'=>1])->count();
            $data[$k]['currJoinNum'] = $currJoinNum?$currJoinNum:0;
            //是否报名
            $isJoin = db('clock_in_join')->where(['uid'=>$uid,'clockInId'=>$v['id'],'status'=>1])->find();//是否当前参与中
            if($isJoin){
                $data[$k]['currJoin'] = 1;
            }else{
                $data[$k]['currJoin'] = 0;;// 1-当前已参加 0-当前未参加
            }
            //打卡报名金额获取
            $prices =db('clock_in_price')->where('clockInId',$v['id'])->order('price','asc')->select();
            $data[$k]['prices'] = $prices;
            //参与金额
            $joinMoney = db('clock_in_join')->where(['clockInId'=>$v['id'],'status'=>['>',0]])->sum('joinMoney');
            $data[$k]['joinMoney'] = $joinMoney?$joinMoney:0;
        }
        Share::jsonData(1,$data);
    }
    /**
     * 打卡活动
     * 活动详情
     */
    public function clockDetail(){
        $id = input('clockInId');
        $uid = $this->uid;
        Share::checkEmptyParams(['id'=>$id]);
        $clock = db('clock_in')->where('id',$id)->find();
        if(!$clock){
            Share::jsonData(0,'','该活动不存在');
        }
        //报名人数
        $currJoinNum = db('clock_in_join')->where(['clockInId'=>$clock['id'],'status'=>1])->count();
        $clock['currJoinNum'] = $currJoinNum?$currJoinNum:0;
        //是否报名
        $isJoin = db('clock_in_join')->where(['uid'=>$uid,'clockInId'=>$clock['id'],'status'=>1])->find();//是否当前参与中
        //判断当前打卡天数及状态
        Share::checkClockInStatus($uid,$isJoin,$clock);
        $isJoin = db('clock_in_join')->where(['uid'=>$uid,'clockInId'=>$clock['id'],'status'=>1])->find();//是否当前参与中
        if($isJoin){
            $clock['currJoin'] = 1;
            $clock['joinTime'] = $isJoin['createTime'];
            $date = date('Y-m-d');
            $todaySign = db('clock_in_sign')->where(['uid'=>$uid,'joinId'=>$isJoin['id'],'clockInId'=>$clock['id'],'date'=>$date])->find();
            if($todaySign){
                $clock['todaySign'] = 1;
            }else{
                $clock['todaySign'] = 0;
            }
            //当前打卡次数
            $hadSign = db('clock_in_sign')->where(['uid'=>$uid,'joinId'=>$isJoin['id'],'clockInId'=>$clock['id']])->count();
            $clock['hadSign'] = $hadSign?$hadSign:0;
            $clock['joinId'] = $isJoin['id'];
        }else{
            $clock['currJoin'] = 0;;// 1-当前已参加 0-当前未参加
            $clock['todaySign'] = 0;//今日签到 0-未签到 1-已签到
            $clock['success'] = 0;//本次挑战 0-未完成 1-已完成
            $clock['hadSign'] = 0;//已签到次数
            $clock['joinId'] = 0;
        }
        //参与金额
        $joinMoney = db('clock_in_join')->where(['clockInId'=>$id,'status'=>['>',0]])->sum('joinMoney');
        $clock['joinMoney'] = $joinMoney?$joinMoney:0;
        //昨日收益金额
        $clock['yesterdayMoney'] = Share::getYesterdayMoneyByClock($uid,$id,$isJoin['id']);
        //打卡报名金额获取
        $prices =db('clock_in_price')->where('clockInId',$clock['id'])->order('price','asc')->select();
        $clock['prices'] = $prices;
        $clock['nowTime'] = time();
        Share::jsonData(1,$clock);
    }
    /**
     * 打卡活动
     * 打卡失败
     */
    public function clockFail(){
        $joinId = input('joinId');
        $uid= $this->uid;
        $res = db('clock_in_join')->where(['id'=>$joinId,'uid'=>$uid])->update(['status'=>0]);
        if($res){
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','失败');
        }
    }
    /**
     * 打卡活动
     * 活动报名
     */
    public function clockInJoin(){
        $uid = $this->uid;
        $clockId = input('clockInId');//活动id
        $joinMoney = input('joinMoney');//报名金额
        $clock = db('clock_in')->where('id',$clockId)->find();
        if(!$clock){
            Share::jsonData(0,'','该活动不存在');
        }
        if($clock['status'] != 1){
            Share::jsonData(0,'','当前打卡活动已关闭！');
        }
//        if($joinMoney > $clock['maxMoney']){
//            Share::jsonData(0,'','当前活动最大报名金额为'.$clock['maxMoney']);
//        }
        //判断是否有该价格
        $hadMoney = db('clock_in_price')->where(['clockInId'=>$clockId,'price'=>$joinMoney])->find();
        if(!$hadMoney){
            Share::jsonData(0,'','没有该价格');
        }
//        if($joinMoney < 1){
//            Share::jsonData(0,'','报名金额不能小于1元');
//        }
        //判断当前是否已经报名
        $hadSign = db('clock_in_join')->where(['uid'=>$uid,'clockInId'=>$clockId,'status'=>1])->find();
        if($hadSign){
            //判断当前打卡天数及状态
            Share::checkClockInStatus($uid,$hadSign,$clock);
            $hadSign = db('clock_in_join')->where('id',$hadSign['id'])->find();
            if($hadSign['status'] == 1){
                Share::jsonData(0,'','你已经报名参加该打卡活动！');
            }
        }
        //扣除报名费用
        Share::reduceClockInMoney($uid,$joinMoney,$clock['name']);
        $params = [
            'uid'=>$uid,
            'clockInId'=>$clockId,
            'status'=>1,
            'beginTime'=>date('Y-m-d'),
            'createTime'=>time(),
            'clockNum'=>0,
            'joinMoney'=>$joinMoney,
        ];
        $res = db('clock_in_join')->insert($params);
        if($res){
            //邀请人信息记录
            $objectStr = '打卡挑战（'.$clock['name'].'）';
            Share::shareReward($uid,$clockId,$objectStr,1);//1-打卡 2-房间挑战 3-闯关 4-邀请新人
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','报名失败，请重试!');
        }
    }
    /**
     * 打卡活动
     * 每日打卡
     */
    public function clockInSign(){
        $uid = $this->uid;
        $clockId = input('clockInId');
        Share::checkEmptyParams(['clockInId'=>$clockId]);
        $clock = db('clock_in')->where('id',$clockId)->find();
        if(!$clock){
            Share::jsonData(0,'','该活动不存在');
        }
        //判断当前是否已经报名
        $hadSign = db('clock_in_join')->where(['uid'=>$uid,'clockInId'=>$clockId,'status'=>1])->find();
        //判断今天是否已打卡
        $today = date('Y-m-d');
        $todaySign = db('clock_in_sign')->where(['uid'=>$uid,'clockInId'=>$clockId,'joinId'=>$hadSign['id'],'date'=>$today])->find();
        if($todaySign){
            Share::jsonData(0,'','今日已打卡，请勿重复操作');
        }
        if(!$hadSign){
            Share::jsonData(0,'','你还没有报名参加该打卡活动！');
        }
        //判断当前打卡天数及状态
        Share::checkClockInStatus($uid,$hadSign,$clock);
        $hadSign = db('clock_in_join')->where(['uid'=>$uid,'clockInId'=>$clockId,'status'=>1])->find();
        if(!$hadSign){
            Share::jsonData(0,'','你还没有报名参加该打卡活动！');
        }
        //打卡时间
        $beginTime = $clock['beginTime'];
        $endTime = $clock['endTime'];
        //当前时间
        $currTime =Share::getMinute(date("H:i"));
        $time = date('Y-m-d H:i:s');
        if($currTime < $beginTime || $currTime > $endTime){
            Share::jsonData(0,'','当前不在活动打卡时间范围内！');
        }
        $today = date('Y-m-d');
        $params = [
            'uid'=>$uid,
            'clockInId'=>$clockId,
            'joinId'=>$hadSign['id'],//当前报名参加的id
            'clockInTime'=>date('Y-m-d H:i:s'),
            'date'=>$today,
            'createTime'=>time(),
        ];
        $res = db('clock_in_sign')->insert($params);
        if($res){
            //记录打卡次数
            $hadNum = $hadSign['clockNum'] + 1;
            $update = ['clockNum'=>$hadNum];
            if($hadNum >=  $clock['days']){//打卡完成
                $update['status'] = 2;
            }
            db('clock_in_join')->where('id',$hadSign['id'])->update($update);
            //发放奖励
            Share::clockInReward($uid,$hadSign['joinMoney'],$clock,$hadSign);
            //退还报名费
            if($hadNum >= $clock['days']){
                Share::returnClockInMoney($uid,$hadSign['joinMoney'],$clock);
            }
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','打卡失败，请重试！');
        }

    }
    /**
     * 打卡活动
     * 我的参与
     */
    public function myClockList(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $status = '';
        $where = [
            'uid'=>$uid,
        ];
        $offset = $pageSize*($page-1);
        $total  = db('clock_in_join')->where($where)->count();
        $data = db('clock_in_join')->where($where)->order('createTime','desc')->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $data[$k]['clock'] = db('clock_in')->where('id',$v['clockInId'])->find();
            //签到数据
            $data[$k]['signData'] = db('clock_in_sign')->where(['uid'=>$uid,'clockInId'=>$v['clockInId'],'joinId'=>$v['id']])->order('clockInTime','asc')->select();
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 打卡活动
     * 打卡记录
     */
    public function clockRecord(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $offset = ($page-1)*$pageSize;
        $total = db('clock_in_sign')->where('uid',$uid)->count();
        $data = db('clock_in_sign')->where('uid',$uid)->order('createTime','desc')->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $clock = db('clock_in')->where('id',$v['clockInId'])->find();
            $data[$k]['clockName'] = isset($clock['name'])?$clock['name']:'已删除';
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 关于我们
     * 1-关于我们 2-帮助中心 3-免责申明
     */
    public function aboutUs(){
        $content = db('system')->where('type',1)->find();
        Share::jsonData(1,$content);
    }
    /**
     * 帮助中心
     * 1-关于我们 2-帮助中心 3-免责申明
     */
    public function helpMsg(){
        $content = db('system')->where('type',2)->select();
        Share::jsonData(1,$content);
    }
    /**
     * 免责申明
     * 1-关于我们 2-帮助中心 3-免责申明
     */
    public function disclaimer(){
        $content = db('system')->where('type',3)->find();
        Share::jsonData(1,$content);
    }
    /**
     * 邀请人
     * 单独绑定
     * 已有邀请人不可修改
     */
    public function addInviter(){
        Share::jsonData(0,'','你已注册，不能绑定邀请人！');
        $uid = $this->uid;
        $inviterCode = input('inviterCode','');
        Share::checkEmptyParams(['inviterCode'=>$inviterCode]);
        $inviterUser = db('member')->where('inviteCode',$inviterCode)->find();
        if(!$inviterUser){
            Share::jsonData(0,'','没有该邀请人，请输入正确的邀请码！');
        }
        $user = db('member')->where('id',$uid)->find();
        if($user['inviteCode'] == $inviterUser){
            Share::jsonData(0,'','你不能邀请自己！');
        }
        if($user['inviterCode']){
            Share::jsonData(0,'','你已绑定邀请人，不能修改');
        }
        $res = db('member')->where('id',$uid)->update(['inviterCode'=>$inviterCode]);
        if($res){
            //邀请人奖励
            Share::shareReward($uid,0,'',4);
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','添加失败，请重试！');
        }
    }
    /**
     * 邀请人
     *我的邀请
     */
    public function myInvite(){
        $uid = $this->uid;
        $myCode = db('member')->where('id',$uid)->find()['inviteCode'];
        $myInvite = db('member')->where('inviterCode',$myCode)->select();
        $return = [];
        foreach($myInvite as $k => $v){
            $return[] = [
                'id'=>$v['id'],
                'nickname'=>$v['nickname'],
                'avatar'=>$v['avatar'],
                'inviteTime'=>date('Y-m-d H:i',$v['createTime']),
            ];
        }
        Share::jsonData(1,$return);
    }

    /**
     * 排行榜
     * 打卡排行榜
     * 前十
     * 1-打卡 2-房间挑战 3-闯关 4-邀请奖励
     */
    public function clockInRanking(){
        $uid = $this->uid;
        $data = db('money_get')->where(['type'=>1])->limit(0,10)->order('moneyGet','desc')->select();
        $own = [
            'mySite'=>0,
            'myMoney'=>0,
        ];
        foreach($data as $k => $v){
            $user = db('member')->where('id',$v['uid'])->find();
            $data[$k]['nickname'] = $user['nickname'];
            $data[$k]['avatar'] = $user['avatar'];if($v['uid'] == $uid){
                $own['mySite'] = $k+1;
                $own['myMoney'] = $v['moneyGet'];
            }
        }
        $return = [
            'ranking'=>$data,
            'own'=>$own,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 排行榜
     * 房间挑战排行榜
     * 前十
     * 1-打卡 2-房间挑战 3-闯关 4-邀请奖励
     */
    public function roomRanking(){
        $uid = $this->uid;
        $data = db('money_get')->where(['type'=>2])->limit(0,10)->order('moneyGet','desc')->select();
        $own = [
            'mySite'=>0,
            'myMoney'=>0,
        ];
        foreach($data as $k => $v){
            $user = db('member')->where('id',$v['uid'])->find();
            $data[$k]['nickname'] = $user['nickname'];
            $data[$k]['avatar'] = $user['avatar'];if($v['uid'] == $uid){
                $own['mySite'] = $k+1;
                $own['myMoney'] = $v['moneyGet'];
            }
        }
        $return = [
            'ranking'=>$data,
            'own'=>$own,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 排行榜
     * 闯关排行榜
     * 前十
     * 1-打卡 2-房间挑战 3-闯关 4-邀请奖励
     */
    public function passRanking(){
        $uid = $this->uid;
        $data = db('money_get')->where(['type'=>3])->limit(0,10)->order('moneyGet','desc')->select();
        $own = [
            'mySite'=>0,
            'myMoney'=>0,
        ];
        foreach($data as $k => $v){
            $user = db('member')->where('id',$v['uid'])->find();
            $data[$k]['nickname'] = $user['nickname'];
            $data[$k]['avatar'] = $user['avatar'];
            if($v['uid'] == $uid){
                $own['mySite'] = $k+1;
                $own['myMoney'] = $v['moneyGet'];
            }
        }
        $return = [
            'ranking'=>$data,
            'own'=>$own,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 排行榜
     * 习惯打卡榜
     * 1-打卡 2-房间挑战 3-闯关 4-邀请奖励
     */
    public function habitRanking(){
        $uid = $this->uid;
        $data = db('money_get')->field("*,sum(moneyGet) as moneyGet")->group('uid')->limit(0,10)->where(['type'=>['!=',4]])->order('moneyGet','desc')->select();
        $own = [
            'mySite'=>0,
            'myMoney'=>0,
        ];
        foreach($data as $k => $v){
            $user = db('member')->where('id',$v['uid'])->find();
            $data[$k]['nickname'] = $user['nickname'];
            $data[$k]['avatar'] = $user['avatar'];
            if($v['uid'] == $uid){
                $own['mySite'] = $k+1;
                $own['myMoney'] = $v['moneyGet'];
            }
        }
        $return = [
            'ranking'=>$data,
            'own'=>$own,
        ];
        Share::jsonData(1,$return);
    }
    /**
     *排行榜
     * 邀请榜
     * 1-打卡 2-房间挑战 3-闯关 4-邀请奖励
     */
    public function inviteRanking(){
        $uid = $this->uid;
        $data = db('money_get')->where(['type'=>4])->limit(0,10)->order('moneyGet','desc')->select();
        $own = [
            'mySite'=>0,
            'myMoney'=>0,
        ];
        foreach($data as $k => $v){
            $user = db('member')->where('id',$v['uid'])->find();
            $data[$k]['nickname'] = $user['nickname'];
            $data[$k]['avatar'] = $user['avatar'];
            if($v['uid'] == $uid){
                $own['mySite'] = $k+1;
                $own['myMoney'] = $v['moneyGet'];
            }
        }
        $return = [
            'ranking'=>$data,
            'own'=>$own,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 闯关活动
     * 闯关活动列表
     */
    public function  passList(){
        $uid = $this->uid;//关闭结束的闯关活动
        Share::closePassEnd();
        $data = db('pass')->where('status',1)->order('number','desc')->select();
        foreach($data as $k => $v){
            //报名人数
            $hadJoin = db('pass_join')->where(['passId'=>$v['id']])->group('uid')->count();
            $data[$k]['joinNum'] = $hadJoin?$hadJoin:0;
            //报名金额
            $joinMoney = db('pass_join')->where('passId',$v['id'])->sum('joinMoney');
            $data[$k]['joinMoney'] = $joinMoney?$joinMoney:0;
            //是否报名
            $join = db('pass_join')->where(['uid'=>$uid,'status'=>0,'passId'=>$v['id']])->find();
            if(!$join){
                $isJoin = 0;//0-当前未参加  1-已参加
            }else{//判断是否已过结束时间
                $now = date('Y-m-d H:i:s');
                if($now > $join['endTime']){
                    //判断打卡状态
                    Share::checkPassStatus($uid,$v['id'],$join['id']);
                    $isJoin = 0;
                }else{
                    $isJoin = 1;
                }
            }
            $data[$k]['isJoin'] = $isJoin;
            //报名价格获取
            $prices = db('pass_price')->where('passId',$v['id'])->order('price','asc')->select();
            $data[$k]['prices'] = $prices;
        }
        Share::jsonData(1,$data);
    }
    /**
     * 闯关活动
     * 闯关详情
     */
    public function passDetail(){
        $uid = $this->uid;
        $passId = input('passId');
        Share::checkEmptyParams(['passId'=>$passId]);
        $pass = db('pass')->where('id',$passId)->find();
        if(!$pass){
            Share::jsonData(0,'','没有该闯关活动！');
        }
        //报名人数
        $hadJoin = db('pass_join')->where(['passId'=>$passId])->group('uid')->count();
        $pass['joinNum'] = $hadJoin?$hadJoin:0;
        //报名金额
        $joinMoney = db('pass_join')->where('passId',$passId)->sum('joinMoney');
        $pass['joinMoney'] = $joinMoney?$joinMoney:0;
        //是否报名
        $join = db('pass_join')->where(['uid'=>$uid,'status'=>0,'passId'=>$passId])->find();
        $hadSign = 0;//当前打卡轮数
        $nextBegin = '';//下一轮签到开始时间
        $nextEnd = '';//下一轮签到结束时间
        $todaySign = 0;
        if(!$join){
            $isJoin = 0;//0-当前未参加  1-已参加
            $signData = [];
        }else{
            //判断是否有未签到记录  0-暂停 1-停止（挑战结束） 2-下一轮（继续挑战）
            if($join['signStatus'] == 1){
                //停止挑战 修改状态
                db('pass_join')->where('id',$join['id'])->update(['status'=>1]);
                $isJoin = 0;
                $todaySign = 0;
            }elseif($join['signStatus'] == 2){
                //判断是否挑战失败
                $now = date('Y-m-d H:i:s');
                $noSign = db('pass_sign')->where(['uid'=>$uid,'passId'=>$passId,'joinId'=>$join['id']])->order('number','desc')->find();
                if($noSign['status'] ==0){//当前未签到
                    $todaySign = 0;
                    //判断是否挑战失败
                    if($now > $noSign['signTimeEnd']){//已挑战失败 修改状态
                        db('pass_join')->where('id',$join['id'])->update(['status'=>2]);
                        $isJoin = 0;
                    }else{//还未到签到时间
                        $nextBegin= $noSign['signTimeBegin'];
                        $nextEnd = $noSign['signTimeEnd'];
                        $isJoin = 1;
                    }
                }else{//今日已签到
                    $todaySign = 1;//0-今日未签到 1-今日已签到
                    $isJoin = 1;
                }
                //获取最新一轮的打卡轮数
                if($isJoin ==1){
                    $hadSign = db('pass_sign')->where(['uid'=>$uid,'passId'=>$passId,'joinId'=>$join['id'],'status'=>1])->order('number','desc')->find()['number'];
                }
            }else{//暂停状态
                $isJoin = 1;//获取签到时间数据
                //获取最新一轮的打卡轮数
                $hadSign = db('pass_sign')->where(['uid'=>$uid,'passId'=>$passId,'joinId'=>$join['id'],'status'=>1])->order('number','desc')->find()['number'];
            }
            if($isJoin ==1){
                $signData = db('pass_sign')->where(['uid'=>$uid,'passId'=>$passId,'joinId'=>$join['id']])->order('number','asc')->select();
            }else{
                $signData = [];
            }
            $signData = $signData?$signData:[];
            $pass['signStatus'] = $join['signStatus'];
            $pass['joinId'] = $join['id'];
        }
        $pass['isJoin'] = $isJoin;
        $pass['signData'] = $signData;
        $pass['hadSign'] = $hadSign?$hadSign:0;
        $pass['nextSignBegin'] = $nextBegin;
        $pass['nextSignEnd'] = $nextEnd;
        $pass['todaySign'] = $todaySign;
        //报名价格获取
        $prices = db('pass_price')->where('passId',$pass['id'])->order('price','asc')->select();
        $pass['prices'] = $prices;
        $pass['nowTime'] = time();
        Share::jsonData(1,$pass);
    }

    /**
     * 闯关活动
     * 闯关报名
     */
    public function passJoin(){
        $uid = $this->uid;
        $passId = input('passId');
        $joinMoney = input('joinMoney');
        Share::checkEmptyParams(['passId'=>$passId,'joinMoney'=>$joinMoney]);
        $pass = db('pass')->where('id',$passId)->find();
        if(!$pass){
            Share::jsonData(0,'','没有该闯关活动！');
        }
        if($pass['status'] != 1){
            Share::jsonData(0,'','该闯关活动已下线！');
        }
        $date = date('Y-m-d H:i:s');
        if($pass['passEndTime'] <= $date){
            Share::jsonData(0,'','该活动已结束');
        }
        //判断是否在报名时间内
        Share::checkPassJoinTime($pass);
        //判断是否有该报名价格
        $hadMoney = db('pass_price')->where(['passId'=>$passId,'price'=>$joinMoney])->find();
        if(!$hadMoney){
            Share::jsonData(0,'','没有该报名价格');
        }
        //检查是否已经报名
        $now = date('Y-m-d H:i:s');
        $time = strtotime($now);
        $hadJoin = db('pass_join')->where(['uid'=>$uid,'status'=>0,'passId'=>$passId])->find();
        if($hadJoin){//已参加且未结束
            Share::jsonData(0,'','你当前已经参加了该闯关活动(闯关中)，不可重复参加！');
        }
//        elseif($hadJoin && $hadJoin['endTime'] < $now){//已参加且已结束  判断状态修改
//            Share::checkPassStatus($uid,$passId,$hadJoin['id']);
//        }
        //获取报名结束时间
        $hour = $pass['hour'];
        $second = $hour*3600;
        $endSecond = $time + $second;
        $endTime = date('Y-m-d H:i:s',$endSecond);
        //添加报名
        $params = [
            'uid'=>$uid,
            'passId'=>$passId,
            'joinTime'=>$now,
            'joinMoney'=>$joinMoney,
            'status'=>0,//参加状态  0-参与中 1-已完成 2-未完成
            'createTime'=>$time,
            'endTime'=>$endTime,
            'isReward'=>0,
            'signStatus'=>2,//0-暂停 1-停止（挑战结束） 2-下一轮（继续挑战）
        ];
        //扣除用户报名费用
        Share::reducePassJoinMoney($uid,$joinMoney,$pass);
        $res = db('pass_join')->insert($params);
        if($res){//报名成功
            //生成用户闯关签到 第一轮
            $join = db('pass_join')->where($params)->find();
            Share::createUserPassSignNew($uid,$pass,$join);

            //邀请人信息记录
            $objectStr = '闯关挑战（'.$pass['name'].'）';
            Share::shareReward($uid,$passId,$objectStr,3);//1-打卡 2-房间挑战 3-闯关 4-邀请新人
            Share::jsonData(1,'','报名成功');
        }else{
            Share::jsonData(0,'','报名失败');
        }
    }
    /**
     * 闯关活动
     * 签到状态修改
     */
    public function passSignStatus(){
        $uid = $this->uid;
        $status = input('status',1);//1-停止 2-继续挑战
        $passId = input('passId');
        $joinId = input('joinId');
        Share::checkEmptyParams(['passId'=>$passId,'joinId'=>$joinId]);
        $join = db('pass_join')->where(['uid'=>$uid,'passId'=>$passId,'status'=>0,'id'=>$joinId])->find();
        if(!$join){
            Share::jsonData(0,'','您还没有挑战中的活动，不能进行该操作');
        }
        if($join['signStatus'] == 1){
            db('pass_join')->where('id',$join['id'])->update(['status'=>1]);
            Share::jsonData(0,'','你已停止该挑战，不能进行该操作');
        }
        if($join['signStatus'] != 0){
            Share::jsonData(0,'','当前活动不是暂停中，不能操作');
        }
        if($status != 1 && $status != 2){
            Share::jsonData(0,'','修改状态不对');
        }
        $update = [
            'signStatus'=>$status
        ];
        if($status ==1 ){//停止挑战
            $update['status'] = 1; //参加状态  0-参与中 1-已完成 2-未完成
        }
        $res = db('pass_join')->where('id',$joinId)->update($update);
        if($res){
            if($status == 2){//生成下一轮的签到数据
                $pass = db('pass')->where('id',$passId)->find();
                Share::createUserPassSignNew($uid,$pass,$join,2);
            }
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','操作失败');
        }

    }
    /**
     * 闯关活动
     * 签到
     */
    public function passSign(){
        $uid = $this->uid;
        $passId = input('passId');
        Share::checkEmptyParams(['passId'=>$passId]);
        $pass = db('pass')->where('id',$passId)->find();
        if(!$pass){
            Share::jsonData(0,'','没有该闯关活动');
        }
//        if($pass['status'] != 1){
//            Share::jsonData(0,'','当前闯关活动已下线');
//        }
        $nowTime = date('Y-m-d H:i:s');//当前时间
        //获取报名信息
        $join = db('pass_join')->where(['uid'=>$uid,'passId'=>$passId,'status'=>0])->find();
        if(!$join){
            Share::jsonData(0,'','你当前还没有报名该闯关活动！');
        }
        if($join['signStatus'] == 0){
            Share::jsonData(0,'','当前挑战是暂停状态，请先开启挑战');
        }
        if($join['signStatus'] == 1){
            db('pass_join')->where('id',$join['id'])->update(['status'=>1]);
            Share::jsonData(0,'','当前活动已停止，请重新报名参加');
        }
        //判断当前签到次数是否已达到
        $hadSignNumber = db('pass_sign')->where(['uid'=>$uid,'passId'=>$passId,'joinId'=>$join['id'],'status'=>1])->group('number')->count();
        if($hadSignNumber >= $pass['challenge']){
            db('pass_join')->where('id',$join['id'])->update(['status'=>1]);
            Share::jsonData(0,'','您已完成挑战');
        }
        //获取当前未打卡记录
        $sign = db('pass_sign')->where(['uid'=>$uid,'passId'=>$passId,'joinId'=>$join['id'],'status'=>0])->order('number','desc')->find();
        if(!$sign){
            Share::jsonData(0,'','没有打卡信息！');
        }
        if($nowTime < $sign['signTimeBegin'] ){
            Share::jsonData(0,'','还没有到打卡时间，请稍后尝试');
        }
        if($nowTime > $sign['signTimeEnd']){
            //修改参与参与状态
            db('pass_join')->where('id',$join['id'])->update(['status'=>2]);
            Share::jsonData(0,'','已过打卡时间，挑战失败');
        }
        //打卡
        $res = db('pass_sign')->where('id',$sign['id'])->update(['status'=>1,'signTime'=>$nowTime]);
        if($res){
            //判断是否完成挑战
            if($sign['number'] == $pass['challenge']){//最后一轮打卡
                //修改参加状态  已完成
                db('pass_join')->where('id',$join['id'])->update(['status'=>1]);
                //发放奖励
//                Share::sendPassReward($uid,$pass,$join['id']);
//                db('pass_join')->where('id',$join['id'])->update(['isReward'=>1]);
            }
            //修改签到状态
            db('pass_join')->where('id',$join['id'])->update(['signStatus'=>0]);
            Share::jsonData(1);
        }else{
            Share::jsonData(0,'','打卡失败，请刷新重试！');
        }
    }
    /**
     * 闯关活动
     * 我的报名
     */
    public function myPass(){
        $uid = $this->uid;
        $status = input('status',99);//99-全部  0-参与中 1-已完成 2-未完成
        $where = [
            'uid'=>$uid,
        ];
        if($status != 99){
            $where['status'] = $status;
        }
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $offset = $pageSize*($page-1);
        $total = db('pass_join')->where($where)->count();
        $data = db('pass_join')->where($where)->limit($offset,$pageSize)->order('joinTime','desc')->select();
        foreach($data as $k => $v){
            $pass = db('pass')->where('id',$v['passId'])->find();
            $data[$k]['pass'] = $pass;
        }
        $return = [
            'total'=>$total,
            'data'=>$data
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 闯关活动
     * 我的签到
     */
    public function myPassSign(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $offset = $pageSize*($page-1);
        $total = db('pass_sign')->where(['uid'=>$uid,'status'=>1])->count();
        $data = db('pass_sign')->where(['uid'=>$uid,'status'=>1])->limit($offset,$pageSize)->order('signTime','desc')->select();
        foreach($data as $k => $v){
            $pass = db('pass')->where('id',$v['passId'])->find();
            $data[$k]['pass'] = $pass?$pass:[];
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 分享有奖
     */
    public function  shareReward(){
        $uid = $this->uid;
        //打卡次数
        $signNum = Share::getUserSignNum($uid);
        //累计收益
        $moneyGet = Share::getUserMoneyGet($uid);
        //加入天数
        $createTime = db('member')->where('id',$uid)->find()['createTime'];
        $joinDate = date('Y-m-d',$createTime);
        $now = date('Y-m-d');//今天
        $joinDays = floor((strtotime($now) - strtotime($joinDate))/86400) +1;
        $return = [
            'signNum'=>$signNum,
            'moneyGet'=>$moneyGet,
            'joinDay'=>$joinDays,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 金额记录
     * 习惯卷记录
     */
    public function myMoneyRecord(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $type = input('moneyType',99);//类型 0-充值 1-打卡 2-房间挑战 3-闯关 99-全部
        $offset = $pageSize*($page-1);
        $where = [
            'uid'=>$uid,
        ];
        if($type != 99){
            $where['moneyType'] = $type;
        }
        $total = db('user_money_record')->where($where)->count();
        $data = db('user_money_record')->where($where)->order('createTime','desc')->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $data[$k]['createTime'] = date('Y-m-d H:i:s',$v['createTime']);
        }
        $user = db('member')->where('id',$uid)->find();
        $return = [
            'money'=>$user['money'],
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 金额记录
     * 收益记录
     */
    public function myMoneyAdd(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $type = input('moneyType',99);//类型  1-打卡 2-房间挑战 3-闯关 4-邀请奖励 99-全部
        $offset = $pageSize*($page-1);
        $where = [
            'uid'=>$uid,
            'type'=>1,
        ];
        $arr = [1,2,3];
        if($type != 99 && in_array($type,$arr)){
            $where['moneyType'] = $type;
        }else{
            $where['moneyType'] = ['in',$arr];
        }
        $total = db('user_money_record')->where($where)->count();
        $data = db('user_money_record')->where($where)->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $data[$k]['createTime'] = date('Y-m-d H:i:s',$v['createTime']);
        }
        $user = db('member')->where('id',$uid)->find();
        //历史总收益
        $totalAdd = db('user_money_record')->where($where)->sum('money');
        $return = [
            'money'=>$user['money'],
            'total'=>$total,
            'data'=>$data,
            'historyProfit'=>$totalAdd?$totalAdd:0,
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 金额体现
     * 提现判断
     * 实名认证判断
     */
    public function returnCheck(){
        $uid = $this->uid;
        $user = db('member')->where('id',$uid)->find();
        $return = [
            'uid'=>$uid,
            'real_name'=>$user['real_name'],
            'card'=>$user['card'],
            'check'=>$user['check'],
        ];
        Share::jsonData(1,$return);
    }
    /**
     * 金额提现
     * 实名认证提交
     */
    public function realNameApply(){
        $uid = $this->uid;
        $realName = input('realName');
        $card = input('card');
        Share::checkEmptyParams(['realName'=>$realName,'card'=>$card]);
        db('member')->where('id',$uid)->update(['real_name'=>$realName,'card'=>$card,'check'=>1]);
        Share::jsonData(1,'','提交成功');
    }
    /**
     * 金额体现
     * 体现申请
     */
    public function returnApply(){
        $uid = $this->uid;
        $money = input('money',0);
        $type = input('type',1);//1-微信 2-支付宝
        $phone = input('phone','');//提现手机号  支付宝必填
        Share::checkEmptyParams(['money'=>$money]);
        if($type ==2 && !$phone){
            Share::jsonData(0,'','请填写支付宝提现手机号');
        }
        if($phone){
            $isPhone = Share::isMobile($phone);
            if(!$isPhone){
                Share::jsonData(0,'','请填写正确的电话好啊');
            }
        }
        if($money < 20){
            Share::jsonData(0,'','提现金额不能小于20');
        }
        //判断是否实名审核通过
        Share::checkRealNameStatus($uid);
        //手续费
        $procedures = 0;
        Share::checkReturnMoney($uid,$money,$procedures);//检查余额
        $orderNo = 'TX'.time().rand(11111,99999);
        //体现申请
        $params = [
            'uid'=>$uid,
            'money'=>$money,
            'status'=>0,//0-体现申请中  1-已体现
            'createTime'=>time(),//申请时间
            'procedures'=>$procedures,
            'type'=>$type,
            'phone'=>$phone,
            'orderNo'=>$orderNo,
        ];
        $res = db('user_return')->insert($params);
        if($res){
            Share::jsonData(1,'','申请成功,等待审核');
        }else{
            Share::jsonData(0,'','申请失败，请重试');
        }
    }
    /**
     * 提现记录
     */
    public function myReturn(){
        $uid = $this->uid;
        $page = input('page',1);
        $pageSize = input('pageSize',10);
        $offset = $pageSize*($page-1);
        $status = input('status',99);//99-全部 0-提现中 1-已提现
        $where = [
            'uid'=>$uid,
        ];
        if($status != 99){
            $where['status'] = $status;
        }
        $total = db('user_return')->where($where)->count();
        $data = db('user_return')->where($where)->order('createTime','desc')->limit($offset,$pageSize)->select();
        foreach($data as $k => $v){
            $data[$k]['createTime'] = date('Y-m-d H:i:s',$v['createTime']);
            $data[$k]['returnTime'] = date('Y-m-d H:i:s',$v['returnTime']);
            $data[$k]['typeStr'] = $v['type'] == 1?'微信':'支付宝';
        }
        $return = [
            'total'=>$total,
            'data'=>$data,
        ];
        Share::jsonData(1,$return);
    }

    /**
     * 读取excel
     */
    public function doExcel(){
        //引入类库
        include "./../extend/PHPExcel-1.8/Classes/PHPExcel/IOFactory.php";
        include_once "./../extend/PinYin.php";

//elsx文件路径
        $inputFileName = "./excel.xlsx";

        date_default_timezone_set('PRC');
// 读取excel文件
        try {
            $inputFileType = \PHPExcel_IOFactory::identify($inputFileName);
            $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
            $objPHPExcel = $objReader->load($inputFileName);
        } catch(\Exception $e) {

        }

// 确定要读取的sheet，什么是sheet，看excel的右下角，真的不懂去百度吧
        $sheet = $objPHPExcel->getSheet(0);
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();

// 获取excel文件的数据，$row=2代表从第二行开始获取数据
        $insertAll = [];
        $createDate = date('Y-m-d H:i:s');
        $status = 1;//0-删除 1-正常
        for ($row = 2; $row <= $highestRow; $row++){
            //数组信息  0-章节编码  1-例子的中文名称 2-是否为有效码
            $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);
            $rowData = $rowData[0];
//这里得到的rowData都是一行的数据，得到数据后自行处理，我们这里只打出来看看效果
            if((count($rowData) >=3 ) && ($rowData[2] == '是')){
                //获取对应的中文名字的首字母拼音
                $pinyin = PinYin::instance()->pinyin($rowData[1],'first');
                $insertAll[] = [
                    'chapter'=>$rowData[0],
                    'name'=>$rowData[1],
                    'pinyin'=>$pinyin,
                    'created_at'=>$createDate,
                    'status'=>$status,
                ];
            }
        }
        db('diagnosis_content')->insertAll($insertAll);
        die('success');
    }

}